/*
Imports data from recentBattles table in Wot Statistics
- Previously imported rows are skipped based on rbId
- Previously logged battles are skipped based on battleTime (battle may have been logged by both programs)
- Records containing multiple battles are corrupt and will be skipped (rbBattles > 100)
- Some values are multiples of 100 and will be redevided for proper reading
- Frags are imported by separate proc
*/


create procedure importBattle
as
insert into battle (
  playerTankId, wsId, battlesCount, frags, dmg, dmgReceived, spotted, cap, def, survived, battleSurviveId, victory, battleResultId, battleTime, shots, hits, xp, mode15, mode7)
select
  pt.id,
  wsrb.rbId,
  wsrb.rbBattles / 100,
  wsrb.rbKills / 100,
  wsrb.rbDamageDealt / 100,
  wsrb.rbDamageReceived / 100,
  wsrb.rbSpotted / 100,
  wsrb.rbCapturePoints / 100,
  wsrb.rbDefencePoints / 100,
  wsrb.rbSurvived,
  case
	when wsrb.rbSurvived = 0 then 3  -- not survived
	when wsrb.rbSurvived = 1 then 1  -- survived
	else 2                           -- some
  end,
  case when wsrb.rbVictory = 0 then 1 else 0 end,
  case
	when wsrb.rbVictory = 0 then 1   -- vicory
	when wsrb.rbVictory = 1 then 3   -- def
	when wsrb.rbVictory = 2 then 2   -- draw
	else 4
  end,
  dateadd(s, wsrb.rbBattleTime, '19700101 01:00:00'),
  wsrb.rbShot / 100,
  wsrb.rbHits / 100,
  wsrb.rbXPReceived / 100,
  case when wsrb.rbBattleMode = 15 then 1 else 0 end,
  case when wsrb.rbBattleMode = 7 then 1 else 0 end
from wsRecentBattles wsrb
left join wsTankId wst on wsrb.rbTankId = wst.wsTankId and wsrb.rbCountryId = wst.wsCountryId
left join tank t on wst.tankId = t.id
left join playerTank pt on t.id = pt.tankId
where
  not exists (select 1 from battle where wsId = wsrb.rbId)
  and not exists (select 1 from battle where battleTime = dateadd(s, wsrb.rbBattleTime, '19700101 01:00:00'))
  and wsrb.rbBattles = 100
  and pt.id is not null

exec importBattleFrag

GO


/*
Imports frags from recentBattles table in Wot Statistics
- Frags are stored in a string: 0:2_61;1:0_34;2:4_19 (arrayId:countryId_tankId)
- Frags have not been recorded for all battles in WS
*/


create procedure importBattleFrag
as

declare c cursor for
select rbId, rbFragList from wsRecentBattles where rbFragList != '' order by rbId
declare
  @wsBattleId int,
  @fragList varchar(200),
  @fragIdSplit int,
  @idSplit int,
  @fragSplit int,
  @battleId int,
  @tankId varchar(10),
  @countryId varchar(10),
  @fraggedTankId int

open c
fetch next from c into @wsBattleId, @fragList    -- Fetch first battle into cursor

while @@fetch_status = 0
begin
  
  /* Read frag data when there are multiple frags in current battle*/
  while (charindex(';', @fragList) > 0)
  begin
	set @fragIdSplit = charindex(':', @fragList)+1              -- split arrayId and frag on :
	set @idSplit = charindex('_', @fragList)+1                  -- split countryId and tankId on _
	set @fragSplit = (charindex(';', @fragList)) - @idSplit     -- split frags on ;

	set @countryId = substring(@fragList, @fragIdSplit, @idSplit - @fragIdSplit - 1)
	set @tankId = substring(@fragList, @idSplit, @fragSplit)

	select @battleId = id from battle where wsId = @wsBattleId
	select @fraggedTankId = tankId from wsTankId where wsTankId = @tankId and wsCountryId = @countryId

	-- Insert or update if same tank is killed multiple times
	if not exists (select 1 from battleFrag where battleId = @battleId and fraggedTankId = @fraggedTankId)
	  insert into battleFrag (battleId, fraggedTankId, fragCount) values (@battleId, @fraggedTankId, 1)
	else
	  update battleFrag set fragCount = fragCount + 1 where battleId = @battleId and fraggedTankId = @fraggedTankId
	
	set @fragList = substring(@fragList, charindex(';', @fragList) + 1, len(@fragList))
  end
  

  /* Read frag data when there is only one frag in current battle or after loop has ended */
  set @fragIdSplit = charindex(':', @fragList)+1
  set @idSplit = charindex('_', @fragList)+1
  
  set @countryId =  substring(@fragList, @fragIdSplit, @idSplit - @fragIdSplit - 1)
  set @tankId = substring(@fragList, @idSplit, len(@fragList))
  
  select @battleId = id from battle where wsId = @wsBattleId
  select @fraggedTankId = tankId from wsTankId where wsTankId = @tankId and wsCountryId = @countryId

  if not exists (select 1 from battleFrag where battleId = @battleId and fraggedTankId = @fraggedTankId)
	insert into battleFrag (battleId, fraggedTankId, fragCount) values (@battleId, @fraggedTankId, 1)
  else
	update battleFrag set fragCount = fragCount + 1 where battleId = @battleId and fraggedTankId = @fraggedTankId


  -- Fetch next battle into cursor
  fetch next from c into @wsBattleId, @fragList

end
close c
deallocate c